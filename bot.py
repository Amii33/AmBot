import logging
import re
import asyncio
import requests
import pickle
import time  
import glob
import os
import shutil
print(os.access(".", os.W_OK))
from typing import Dict, Any
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    Message, CallbackQuery
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.utils.media_group import MediaGroupBuilder
from video_photo_utils import send_clean_video, send_clean_photo
from io import BytesIO
from aiogram.types import ReplyKeyboardRemove

class PickleDatabase:
    def __init__(self, filename: str):
        self.filename = filename
        self._ensure_directory_exists()
        self.data = self._safe_load()
        
    def _ensure_directory_exists(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        os.makedirs(os.path.dirname(self.filename), exist_ok=True)
        
    def _safe_load(self) -> Dict[int, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not os.path.exists(self.filename):
            return {}
            
        try:
            with open(self.filename, 'rb') as f:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if os.path.getsize(self.filename) > 0:
                    return pickle.load(f)
                return {}
        except (EOFError, pickle.UnpicklingError) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –ë–î.")
            return {}
            
    def _safe_save(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_filename = self.filename + '.tmp'
            with open(temp_filename, 'wb') as f:
                pickle.dump(self.data, f)
                
            # –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if os.path.exists(self.filename):
                os.replace(self.filename, self.filename + '.bak')
            os.rename(temp_filename, self.filename)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")
            raise
            
    def update_user(self, user_id: int, user_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.data[user_id] = user_data
        self._safe_save()

doc_url3 = "https://rutracker.org/forum/tracker.php?nm=capture"
doc_url4 = "https://www.utorrent.com"
doc_url5 = "https://appstorrent.ru"
doc_url6 = "https://transmissionbt.com"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7283157723:AAE0B9T6V4pNQ7TxyKF-1q9CxwPwrsltoT8'
ADMIN_ID = 167162909  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Form(StatesGroup):
    language = State()        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    user_data = State()       # –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    agree = State()           # –°–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
    post_content = State()    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: —Ç–µ–∫—Å—Ç
    post_media = State()      # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: –º–µ–¥–∏–∞
    post_confirm = State()    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    post_language = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
web_app_url = "https://script.google.com/macros/s/AKfycbwZvyf6UHxf8R-7ZNbl0tarBXyvyBdwumzfp_xTTlJ5IpG86tgddXbX4NvwFUWeNgQ7VQ/exec"
async def save_to_google_sheets(user_data: dict):
    try:
        response = requests.post(
            web_app_url,
            json=user_data,
            headers={"Content-Type": "application/json"}
        )
        if response.status_code == 200:
            print("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID

def get_user_lang(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.data.get(user_id, {}).get('language', 'ru')

def create_admin_keyboard(lang: str) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    builder = ReplyKeyboardBuilder()
    if lang == 'ru':
        builder.row(KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"))
        builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    else:
        builder.row(KeyboardButton(text="üìù Create post"))
        builder.row(KeyboardButton(text="‚ùå Cancel"))
    return builder.as_markup(resize_keyboard=True)

async def show_admin_panel(user_id: int, lang: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await bot.send_message(
        chat_id=user_id,
        text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" if lang == 'ru' else "üëë Admin panel",
        reply_markup=create_admin_keyboard(lang)
    )

async def send_course_offer(user_id: int, lang: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –∫—É—Ä—Å–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å"""
    await asyncio.sleep(60)  # –ñ–¥–µ–º 1 —á–∞—Å
    
    try:

        if lang == 'ru':
            caption = """üíã –ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —É—Ä–æ–∫ –∏ —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è –µ—â—ë –∫—Ä—É—á–µ, –ø—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –Ω–∞ –º–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å <b>American PRO.</b>\n
–¢–∞–º —è —Å–æ–±—Ä–∞–ª–∞ –≤—Å–µ —Å–∞–º—ã–µ —Ä–∞–±–æ—á–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–∞–º–∞ –ø–æ–ª—å–∑—É—é—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ç —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Ü–≤–µ—Ç, —á–∏—Å—Ç—É—é —Ä–µ—Ç—É—à—å –∏ —Å—Ç–∏–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ.\n
<b>American PRO</b> ‚Äî <i>—ç—Ç–æ –ø—Ä–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö, –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–Ω–æ —Å—Ä–∞–∑—É, –∏ –ø—Ä–æ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è—é—Ç —É—Ä–æ–≤–µ–Ω—å!\n
–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è - –±—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –û–±–µ—â–∞—é: –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ!</i> ‚ù§Ô∏è\n
–û–ø–ª–∞—Ç–∏—Ç—å <b>American PRO</b> –º–æ–∂–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ: —Ä–∞—Å—Å—Ä–æ—á–∫–∏, –æ–ø–ª–∞—Ç–∞ –¥–æ–ª—è–º–∏, —Å–ø–ª–∏—Ç ‚Äî –≤—Å—ë –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç–≤–æ–π —Ä–æ—Å—Ç –Ω–∞—á–∞–ª—Å—è —É–∂–µ —Å–µ–π—á–∞—Å, –∞ –Ω–µ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º.\n
–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://antoinettass.ru/AmericanPro\n
–•–æ—á–µ—à—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ‚Äî –ø–∏—à–∏ –º–Ω–µ –ø—Ä—è–º–æ —Å—é–¥–∞ @antoinettass  ‚ù§Ô∏è"""
            photo_ids = [
                "AgACAgIAAxkBAAIIEGglWxDibybePkl9NDogGJTwc2u9AAIN6jEbqbIxSbqG6rf5OEaAAQADAgADeQADNgQ", 
                "AgACAgIAAxkBAAIIEmglWzJN2xQfa2NzjbiR_iWIA2EiAAIO6jEbqbIxSeTAzOZNy6GjAQADAgADeQADNgQ",
                "AgACAgIAAxkBAAIIFGglW0tGcYE-JU-pIJtYikqZPtOUAAIP6jEbqbIxSbO7QlLl_EWfAQADAgADeQADNgQ"
            ]
        else:
            caption = """If you enjoyed the lesson and want to level up even more, i invite you to my author's course <b>American PRO.</b>\n
There I collected all the most working techniques that i use everyday to get the most expensive color, clean retouching and stylish shots that I want to look at endlessly.\n\n<b>American PRO</b><i> is about confidence in your work, about results that are immediately visible, and about skills that really change the level!\nIf you feel like you're responding, I'll be glad to see you! I promise: it will be interesting, understandable and inspiring!</i>\n\nYou can pay for <b>American PRO</b> via Visa or MasterCard, as well as a crypto wallet.\n\nTo purchase the course, write to me in @antoinettass telegram or on instagram using the same nickname. ‚ù§Ô∏è"""
            photo_ids = [
                "AgACAgIAAxkBAAIIEGglWxDibybePkl9NDogGJTwc2u9AAIN6jEbqbIxSbqG6rf5OEaAAQADAgADeQADNgQ",
                "AgACAgIAAxkBAAIIEmglWzJN2xQfa2NzjbiR_iWIA2EiAAIO6jEbqbIxSeTAzOZNy6GjAQADAgADeQADNgQ",
                "AgACAgIAAxkBAAIIFGglW0tGcYE-JU-pIJtYikqZPtOUAAIP6jEbqbIxSbO7QlLl_EWfAQADAgADeQADNgQ"
            ]

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
        media = MediaGroupBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é
        media.add_photo(
            media=photo_ids[0],
            caption=caption,
            parse_mode=ParseMode.HTML
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        for photo_id in photo_ids[1:]:
            media.add_photo(media=photo_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        await bot.send_media_group(
            chat_id=user_id,
            media=media.build()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å
        try:
            await bot.send_message(
                chat_id=user_id,
                text=caption,
                parse_mode=ParseMode.HTML
            )
        except Exception as fallback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {fallback_error}")


async def send_followup_message(user_id: int, lang: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å"""
    try:
        if lang == 'ru':
            # –†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è - 1 –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            await bot.send_photo(
                chat_id=user_id,
                photo="AgACAgIAAxkBAAIIHmglXGCMAAHOZynJQacIsCVwzpt8eAACK-sxG5v3KUln9NDEBaWVZAEAAwIAA3kAAzYE",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
                caption="""–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ê–Ω—Ç—É–∞–Ω–µ—Ç—Ç–∞ ‚ù§Ô∏è\n
–ö–∞–∫ —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? –£–∂–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∏–¥–µ–∏, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å?üßö‚Äç‚ôÄ
–ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –±–æ–ª—å—à–µ–≥–æ ‚Äî –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫—É—Ä—Å:""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üî¥üî¥üî¥ –°–ú–û–¢–†–ï–¢–¨ –ü–†–û–ì–†–ê–ú–ú–£ üî¥üî¥üî¥",
                        url="https://antoinettass.ru/AmericanPro"
                    )]
                ])
            )
                
        else:
            # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è - 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏
            media = MediaGroupBuilder(
                caption="""Hey, it's Antoinetta! ‚ù§Ô∏è\n
How did you like the materials? Got any ideas already on how to use them?üßö‚Äç‚ôÄ \n
If you're ready to go further ‚Äî here's a sneak peek at what's included in the course"""
            )
            photo_ids = ["AgACAgIAAxkBAAIIFmglXA75cqx0EcPt4PxcampUoYsQAAIQ6jEbqbIxSQcOMFWLWemLAQADAgADeQADNgQ", "AgACAgIAAxkBAAIIGGglXBdwAhNgneWCqORJ5rDsmSMUAAIR6jEbqbIxSQaJvVuyicD9AQADAgADeQADNgQ", "AgACAgIAAxkBAAIIGmglXCaEIN6h-LxYj7CBKLA3KOmpAAIS6jEbqbIxSX8J-Dt4nLD8AQADAgADeQADNgQ", "AgACAgIAAxkBAAIIHGglXDGUfdrASTu14gJvnefsfqPfAAIT6jEbqbIxSWtGtibLFWjQAQADAgADeQADNgQ"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ file_id
            for photo_id in photo_ids:
                media.add_photo(media=photo_id)
            
            await bot.send_media_group(chat_id=user_id, media=media.build())
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def schedule_followup(user_id: int, lang: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É follow-up —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å"""
    await asyncio.sleep(120)  # –ñ–¥–µ–º 1 –¥–µ–Ω—å (86400 —Å–µ–∫—É–Ω–¥)
    await send_followup_message(user_id, lang)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
db_path = "/home/ra59622/telegram_bot/data/bot_database.pkl" # –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
db = PickleDatabase(db_path)
if not db.data:
    db.data = {}
    db._safe_save()

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
@dp.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.set_state(Form.language)
    
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π'), KeyboardButton(text='üá¨üáß English')]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! üíãüëãüèª \n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
        "Hey there! üíãüëãüèª \nChoose the language you'd prefer to receive the materials in:",
        reply_markup=markup
    )

@dp.message(Form.language)
async def process_language(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    lang = 'ru' if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' else 'en'
    await state.update_data(language=lang)
    db.update_user(message.from_user.id, {'language': lang})
    
    if lang == 'ru':
        text = """üíå–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n–¢–≤–æ—ë –∏–º—è, –ø–æ—á—Ç—É –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n(–≤–æ—Ç —Ç–∞–∫, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é‚§µÔ∏è)\n\n*–ü—Ä–∏–º–µ—Ä:*\n–ê–Ω–Ω–∞, mail@mail.ru, +79998887766"""
    else:
        text = """üíåPlease, write in one message:\n\nYour name, email and phone number\n(like this, separated by commas‚§µÔ∏è)\n\n*Example:*\nAnna, mail@mail.com, +79998887766"""

    await state.set_state(Form.user_data)
    await message.answer(
        text, 
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    )


@dp.message(Form.user_data)
async def process_user_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω)"""
    lang = (await state.get_data()).get('language', 'ru')
    user_input = message.text
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ (–æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "–ò–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω")
    try:
        name, email, phone = [part.strip() for part in user_input.split(',')]
    except ValueError:
        error_text = ("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –ò–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω\n"
                     "<b>–ü—Ä–∏–º–µ—Ä:</b> –ê–Ω–Ω–∞, mail@mail.ru, +79998887766"
                     if lang == 'ru'
                     else "‚ö†Ô∏è Invalid format. Use: Name, email, phone\n"
                     "<b>Example:</b> John, john@gmail.com, +79998887766")
        await message.answer(error_text, parse_mode=ParseMode.HTML)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if not email or not re.fullmatch(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+', email):
        error_text = ("üì© –•–º, –∫–∞–∂–µ—Ç—Å—è, –ø–æ—á—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ —Å–æ–≤—Å–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–±—ã –±—ã–ª –∏ @, –∏ –¥–æ–º–µ–Ω\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, .com, .ru, .me –∏ —Ç.–ø.)\n\n"
                     "<b>–ü—Ä–∏–º–µ—Ä:</b>\nanna@mail.ru ‚úÖ\nanna@justtext ‚ùå\n\n–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω(–∞) ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –∞–¥—Ä–µ—Å –∏–∑ –ø–æ—á—Ç—ã, —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ üôèüèª"
                     if lang == 'ru'
                     else "üì© Hmm, it seems the email is not quite correct.\nPlease check that there is both @ and a domain\n(for example, .com, .ru, .me, etc.)\n\n"
                     "<b>Example:</b>\nanna@mail.ru ‚úÖ\nanna@justtext ‚ùå\n\nIf you are not sure, just copy the address from the mail, it is more reliable üôèüèª")
        await message.answer(error_text, parse_mode=ParseMode.HTML)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_digits = phone.lstrip('+')  # –£–¥–∞–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä
    if not phone_digits or not phone_digits.isdigit() or not 10 <= len(phone_digits) <= 15:
        error_text = ("‚ö†Ô∏è –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã.\n –ú–æ–∂–Ω–æ —Å ¬´+¬ª –∏–ª–∏ –±–µ–∑ - –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ\n–±–µ–∑ –æ—à–∏–±–æ–∫.\n\n"
                     "<b>–ü—Ä–∏–º–µ—Ä:</b>\n+79998887766 –∏–ª–∏ 79998887766\n(–µ—Å–ª–∏ —Ç—ã –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º\n—Ñ–æ—Ä–º–∞—Ç–µ)"
                     if lang == 'ru'
                     else "‚ö†Ô∏è Please write your phone number - with the country code.\n You can with or without "+" - as you prefer. The main thing is that everything\n is without errors.\n\n"
                     "<b>Example:</b>\n+79998887766 or 79998887766\n(if you are from another country - just enter your number in the usual\nformat)")
        await message.answer(error_text, parse_mode=ParseMode.HTML)
        return

    # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
    await state.update_data(name=name, email=email, phone=phone)
    await state.set_state(Form.agree)

        
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)" if lang == 'ru' else "‚úÖ I agree",
            callback_data="agree"
        )]
    ])
    
    doc_url1 = "https://drive.google.com/file/d/1vmfhP6iUApYywHKk1qZcVWiOKuv2oA5v/view?usp=sharing"
    doc_url2 = "https://drive.google.com/file/d/1cR1AT2e9quW1XAD9aixZ092YtjGrLWy6/view?usp=sharing"
    text = (f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—åc—è —Å [–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({doc_url1}) –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ\n\n‚ö†Ô∏è –ß—Ç–æ–±—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏ üôåüèª"
            if lang == 'ru'
            else f"üìÑ Please review the [privacy policy]({doc_url2}) and confirm your agreement\n\n‚ö†Ô∏è Materials are not duplicated - click the button once and wait a little üôåüèª")
    
    await state.set_state(Form.agree)
    await message.answer(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(Form.agree, lambda c: c.data == 'agree')
async def process_agreement(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await callback_query.answer()
    data = await state.get_data()
    lang = data['language']
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    name = data.get("name", "")
    email = data.get("email", "")
    phone = data.get("phone", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
    user_data = {
        "user_id": user_id,
        "name": name,
        "email": email,
        "phone": phone,
        "language": lang
    }
    await save_to_google_sheets(user_data)



    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    welcome_msg = {
        'ru': "<b>–ì–û–¢–û–í–û!</b> üíã\n\n–õ–æ–≤–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ!",
        'en': "<b>DONE!</b> üíã\n\nCatch the free materials - these are the first steps in our course!"
    }
    await callback_query.message.answer(
        welcome_msg[lang],
        parse_mode=ParseMode.HTML  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    )
    await asyncio.sleep(0.5)

    # –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    lessons = [
        # –£—Ä–æ–∫ 1 - 1 –≤–∏–¥–µ–æ
        {
            'ru': {
                'text': """üìπ 1 —É—Ä–æ–∫. –í–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫.\n
‚ú®<i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è!</i>""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFJ2glGalCUJPHmjujifrWmd6I3pi8AAIodgACqbIpSZUBjZfNukWINgQ"}
                ]
            },
            'en': {
                'text': """üìπ 1 lesson. Introductory lesson.\n
‚ú®<i>Be sure to watch this tutorial before you start learning!\n\nThe video was dubbed using a neural program. Please don't be too critical.</i>\n\n<b>If you didn't understand something - just let me know, i`ll help!\n\nYou can always text me directly in Telegram: @antoinettassüñ§</b>""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGq2glL87uRuCe8ZXIJiZoK_-NSmELAAJ1dgACqbIpSdwm4BTfFOx1NgQ"}
                ]
            }
        },
        # –£—Ä–æ–∫ 2 - 2 –≤–∏–¥–µ–æ –∏ 1 —Ñ–æ—Ç–æ
        {
            'ru': {
                'text': """üìπ 2 —É—Ä–æ–∫. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å Photoshop. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã, —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏.\n
‚ú®<i>–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å —Ñ–æ—Ç–æ—à–æ–ø–æ–º. –ù–∞—Å—Ç—Ä–æ–∏–º —Ä–∞–±–æ—á—É—é —Å—Ä–µ–¥—É –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.</i>""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFNWglGl_jBKz_3TYZ76my0-eiBvZXAAI3dgACqbIpSbiCDHiYU768NgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFN2glG69tNox5DMrFUHo7jgAB5LbTzwACQXYAAqmyKUm6WTbmiJRrRjYE"},
                    {'type': 'photo', 'id': "AgACAgIAAxkBAAIFRWglHWxVpg3kFFyIq_teoW8-xQJ8AALT8jEbpLIpSakqW7YVXCemAQADAgADeQADNgQ"}
                    ]
            },
            'en': {
                'text': """üìπ Lesson 2. Introduction to Photoshop. Setting up the work environment, color profile, keyboard shortcuts.\n
‚ú®<i>In this video, we will get acquainted with photoshop. Let's set up the work environment and the color profile.\n\nThe video was dubbed using a neural program. Please don't be too critical. If you didn't understand something, let me know or write to me about it. I hope for your understanding!\n
üìã + I have attached the checklist "list of hotkeys</i>" """,
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGrWglMK29J9qzcgo2PuEaxTwnOKPTAAJ2dgACqbIpSdXQ-k9xrIdUNgQ"},
                    {'type': 'photo', 'id': "AgACAgIAAxkBAAIHBmglOUYFQvt57cAVV3jjZ2OF2vm9AAL-6jEbm_cpSaNOribt8PKTAQADAgADeQADNgQ"}
                ]
            }
        },
        # –£—Ä–æ–∫ 3 - 3 –≤–∏–¥–µ–æ –∏ 4 —Å—Å—ã–ª–∫–∏
        {
            'ru': {
                'text': f"""üìπ 3 —É—Ä–æ–∫. –ü—Ä–æ—è–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Camera Raw, Lightroom, Capture One\n
‚ú®<i>–í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è –ø–æ–∫–∞–∂—É –≤–∞–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö. –í—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –∏ —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏.</i>\n\n üëâüèª —Å–∫–∞—á–∞—Ç—å <a href="{doc_url3}">–ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è Windows</a>: –∫–∞–ø—á–µ—Ä, –ª–∞–π—Ç—Ä—É–º, —Ñ–æ—Ç–æ—à–æ–ø (–Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è) –∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º <a href="{doc_url4}">—Å–∫–∞—á–∞—Ç—å torrent</a>\n
üëâüèª —Å–∫–∞—á–∞—Ç—å <a href="{doc_url5}">–ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è Mac</a>: –∫–∞–ø—á–µ—Ä, –ª–∞–π—Ç—Ä—É–º, —Ñ–æ—Ç–æ—à–æ–ø, –Ω–æ —è –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∞. –ü–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º <a href="{doc_url6}">—Å–∫–∞—á–∞—Ç—å transmission</a>""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFOWglHFXWyBuEDzmItV6-u4UKII3YAAJEdgACqbIpSfIOhGTxyRObNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFO2glHJEJsDe0QSwH37uluJ7XLQUsAAJGdgACqbIpSeO1_0QzXdvVNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFPWglHQRgjkdw6jlo6P19RUyoT6YSAAJHdgACqbIpSYboa86u2jfmNgQ"}
                    
                ]
            },
            'en': {
                'text': f"""üìπ Lesson 3. Developing photos in Camera Raw, Lightroom, Capture One.\n
‚ú®<i>In this video, I will show you the initial stage of photo processing in various programs. You will learn how to work with photos in each of them and will be able to compare their advantages and disadvantages.</i>\n\nThe video was translated and dubbed using the Ai Magics service. Please don't be too critical. If you didn't understand something, let me know or write to me about it. I hope for your understanding!\n\nüëâüèª free download <a href="{doc_url3}">programs for Windows</a>: Capture, Lightroom, Photoshop (you need to register) and <a href="{doc_url4}"> download torrent</a> before downloading\n
üëâüèª free download <a href="{doc_url5}">programs for Mac</a>: Capture, Lightroom, Photoshop, but I haven't tried it:<a href="{doc_url6}"> download transmission</a> before downloading""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGr2glMPsOoG3SoYxlRA8vDK6OVwNZAAJ3dgACqbIpSRQIHrM8EhLVNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGsWglMRyLI_XP-Jn6PYDSlzb1i6EIAAJ4dgACqbIpSR1qVWl2hw8zNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGs2glMUyIyZRbqc76yYmrFU29lIDSAAJ5dgACqbIpSQNVt1WOq5hTNgQ"}
                    
                ]
            }
        },
        # –£—Ä–æ–∫ 4 - 3 –≤–∏–¥–µ–æ
        {
            'ru': {
                'text': """üìπ 4 —É—Ä–æ–∫. –û—Ç–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Camera Raw, Lightroom, Capture One.\n
‚ú®<i>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –≤—ã –æ—Å–≤–æ–∏—Ç–µ –º–µ—Ç–æ–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞.</i>""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFP2glHSaqExCJWQ39eK6sy3769KoCAAJIdgACqbIpSbShRcQMiDToNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFQWglHUAdxpVv89j8iht1ihKTYIPCAAJJdgACqbIpSd3vFFnPvEhqNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIFQ2glHV6kNLznDre_9evW2sF64tPkAAJKdgACqbIpSRu0x7R1A53qNgQ"}
                ]
            },
            'en': {
                'text': """üìπ Lesson 4. Selecting photos in Camera Raw, Lightroom, Capture One.\n
‚ú®<i>In this lesson, you will learn how to quickly and efficiently select photos from a large volume.\n\nThe video was translated and dubbed using the Ai Magics service. Please don't be too critical. If you didn't understand something, let me know or write to me about it. I hope for your understanding!</i>""",
                'parse_mode': ParseMode.HTML,
                'media': [
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGtWglMW3DQAKmA1oyiC7xsvOn-__UAALcYQAClLkxSbJpYzgkAnlcNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGt2glMaGzJm_lWotJhWy5LaFw7sIGAALdYQAClLkxScFL9bwtP5hsNgQ"},
                    {'type': 'video', 'id': "BAACAgIAAxkBAAIGuWglMbXU3y7-M4ZKqQ0Z7CxQkZDRAAJ6dgACqbIpSTdVumjpWyt5NgQ"}
                ]
            }
        },
        # –£—Ä–æ–∫ 5 - 1 –≤–∏–¥–µ–æ
        {
    'ru': {
        'text': """üìπ 5 —É—Ä–æ–∫. –î–æ–ø. —É—Ä–æ–∫. –¶–≤–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É.\n
‚ú®<i>–£—Ä–∞! –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª —Ü–µ–ª—ã–π –º–æ–¥—É–ª—å - –∏ —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ: </i><b>—Ü–≤–µ—Ç</b>üé®\n\n"""
                """<i>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –Ω–∞—É—á–∏–º—Å—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ü–≤–µ—Ç, –∫–∞–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ ‚Äî –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤–∞–π–±, –æ—Ç—Ç–µ–Ω–∫–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –¥–æ–≤–æ–¥–∏—Ç—å –≤—Å—ë –¥–æ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞.</i>\n\n"""
                """<i>–õ–ï–¢–° –ì–û–£–£–£!</i> üí•""",
        'parse_mode': ParseMode.HTML,
        'media': [
            {'type': 'video', 'id': "BAACAgIAAxkBAAIFRmglH8VjN_YP9zEHeXXAyTasiImbAAJQdgACqbIpSdVpmXL9x677NgQ"}
        ]
    },
    'en': {
        'text': """üìπ Lesson 5. Additional lesson. Color by reference.\n
‚ú®<i>Hooray! You've already completed a whole module - and now let's get to the most interesting part: </i><b>color</b>üé®\n\n"""
                """<i>In this lesson, we'll learn how to adjust the color as in the reference - to convey the vibe, shades, mood and bring everything to a beautiful final tone.</i>\n\n"""
                """<i>LETS GO!</i> üí•""",
        'parse_mode': ParseMode.HTML,
        'media': [
            {'type': 'video', 'id': "BAACAgIAAxkBAAIJKmglw5C7Sn5lE1IJMmVknWRLlJDFAAIdcgACLDExSc_KRfqkyEe3NgQ"}
        ]
    }
}
    ]

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
    for lesson_num, lesson in enumerate(lessons, start=1):
        lesson_data = lesson[lang]
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        await callback_query.message.answer(
            text=lesson_data['text'],
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        )

        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for media in lesson_data['media']:
            if media['type'] == 'video':
                await send_clean_video(
                    bot=bot,
                    user_id=callback_query.from_user.id,
                    file_id=media['id']
                )
            
            elif media['type'] == 'photo':
                await send_clean_photo(
                    bot=bot,
                    user_id=callback_query.from_user.id,
                    file_id=media['id'],
                    caption=f"–°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à üé≤üëÜüèª" if lang == 'ru' else f"List of hotkeys üé≤üëÜüèª",
)

                            
            elif media['type'] == 'link':
                await callback_query.message.answer(
                    f"üîó {media['text']}: {media['url']}",
                    disable_web_page_preview=True
                )
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏
        await asyncio.sleep(1)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'language': lang,
            'phone': data['phone'],
            'agreed': True,
            'reg_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
             'lessons_sent': True
        }
        db.update_user(user_id, user_data)  
                          
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(send_course_offer(user_id, lang))  # –ß–µ—Ä–µ–∑ 1 —á–∞—Å
    asyncio.create_task(schedule_followup(user_id, lang))  # –ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if await is_admin(user_id):
        await show_admin_panel(user_id, lang)
    
    await state.clear()
    

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤)
@dp.message(lambda message: message.text in ["üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", "üìù Create post"])
async def start_post_creation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if not await is_admin(message.from_user.id):
        return
    
    lang = get_user_lang(message.from_user.id)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø–æ—Å—Ç–∞
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π'), KeyboardButton(text='üá¨üáß English')],
            [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞' if lang == 'ru' else '‚ùå Cancel')]
        ],
        resize_keyboard=True
    )
    
    await state.set_state(Form.post_language)
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–æ—Å—Ç–∞:" if lang == 'ru' else "üåç Select post language:",
        reply_markup=markup
    )

@dp.message(Form.post_language)
async def process_post_language(message: Message, state: FSMContext):
    lang = get_user_lang(message.from_user.id)
    post_lang = 'ru' if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' else 'en'
    
    await state.update_data(post_language=post_lang)
    await state.set_state(Form.post_content)
    
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ:" if lang == 'ru' 
        else "‚úèÔ∏è Enter post text in selected language:",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Form.post_content)
async def process_post_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    if not message.text:
        lang = get_user_lang(message.from_user.id)
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞" if lang == 'ru' 
            else "‚ö†Ô∏è Please enter post text"
        )
        return
    
    await state.update_data(post_text=message.text, post_media=[])
    lang = get_user_lang(message.from_user.id)
    
    builder = ReplyKeyboardBuilder()
    if lang == 'ru':
        builder.add(KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    else:
        builder.add(KeyboardButton(text="‚è≠ Skip"), KeyboardButton(text="‚ùå Cancel"))
    builder.adjust(1)
    
    await state.set_state(Form.post_media)
    await message.answer(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'" if lang == 'ru'
        else "üñº Send media (photo, video, document) or press 'Skip'",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(Form.post_media, lambda message: message.content_type in ['photo', 'video', 'document'])
async def process_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_media = data.get('post_media', [])
    
    if message.content_type == 'photo':
        post_media.append(('photo', message.photo[-1].file_id))
    elif message.content_type == 'video':
        post_media.append(('video', message.video.file_id))
    elif message.content_type == 'document':
        post_media.append(('document', message.document.file_id))
    
    await state.update_data(post_media=post_media)
    lang = get_user_lang(message.from_user.id)
    
    await message.answer(
        "‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'" if lang == 'ru'
        else "‚úÖ Media added. Send more or press 'Done'"
    )

@dp.message(Form.post_media, lambda message: message.text in ["‚úÖ –ì–æ—Ç–æ–≤–æ", "‚úÖ Done", "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚è≠ Skip"])
async def finish_media(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
    lang = get_user_lang(message.from_user.id)
    data = await state.get_data()
    post_text = data.get('post_text', '')
    post_media = data.get('post_media', [])
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    preview_text = "üëÅ‚Äçüó® *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n" + (post_text if post_text else "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
    preview_text += ("\n\nüìé –ú–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏–π: " if lang == 'ru' else "\n\nüìé Media attachments: ") + str(len(post_media))
    
    await message.answer(preview_text, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if post_media:
        media_group = MediaGroupBuilder(caption=post_text if post_text else None)
        for media_type, media_id in post_media:
            if media_type == 'photo':
                media_group.add_photo(media=media_id)
            elif media_type == 'video':
                media_group.add_video(media=media_id)
            elif media_type == 'document':
                media_group.add_document(media=media_id)
        
        await message.answer_media_group(media_group.build())
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = ReplyKeyboardBuilder()
    if lang == 'ru':
        builder.add(KeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    else:
        builder.add(KeyboardButton(text="‚úÖ Publish"), KeyboardButton(text="‚ùå Cancel"))
    builder.adjust(1)
    
    await state.set_state(Form.post_confirm)
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞" if lang == 'ru'
        else "Confirm publishing this post",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(Form.post_confirm, lambda message: message.text in ["‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "‚úÖ Publish"])
async def publish_post(message: Message, state: FSMContext):
    data = await state.get_data()
    post_text = data.get('post_text', '')
    post_media = data.get('post_media', [])
    post_lang = data.get('post_language', 'ru')  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ—Å—Ç–∞
    lang = get_user_lang(message.from_user.id)

    success = 0
    failures = 0

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —è–∑—ã–∫—É
    target_users = {
        user_id: user_data 
        for user_id, user_data in db.data.items() 
        if user_data.get('language') == post_lang
    }

    if not target_users:
        await message.answer(
            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!" if lang == 'ru' 
            else "‚ùå No users with selected language!",
            reply_markup=create_admin_keyboard(lang)
        )
        await state.clear()
        return

    # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in target_users:
        try:
            if post_media:
                media_group = MediaGroupBuilder(caption=post_text if post_text else None)
                for media_type, media_id in post_media:
                    if media_type == 'photo':
                        media_group.add_photo(media=media_id)
                    elif media_type == 'video':
                        media_group.add_video(media=media_id)
                    elif media_type == 'document':
                        media_group.add_document(media=media_id)
                
                await bot.send_media_group(user_id, media_group.build())
            else:
                await bot.send_message(user_id, post_text)
            
            success += 1
        except Exception as e:
            failures += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer(
        f"üì¢ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–ª—è {post_lang.upper()} –∞—É–¥–∏—Ç–æ—Ä–∏–∏!\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {failures}"
        if lang == 'ru' else 
        f"üì¢ Post published for {post_lang.upper()} audience!\n"
        f"‚Ä¢ Success: {success}\n"
        f"‚Ä¢ Failures: {failures}"
    )
    
    await state.clear()

@dp.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    lang = get_user_lang(message.from_user.id)
    if await is_admin(message.from_user.id):
        await show_admin_panel(message.from_user.id, lang)

@dp.message(Command("backup"))
async def cmd_backup(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pkl"
    shutil.copy2(db.filename, backup_name)
    
    with open(backup_name, 'rb') as f:
        await message.answer_document(f, caption="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã")
    
backup_files = glob.glob("backup_*.pkl")
for file in backup_files:
    if os.stat(file).st_mtime < (time.time() - 7 * 86400):
        os.remove(file)
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {file}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)



if __name__ == '__main__':
    asyncio.run(main())
